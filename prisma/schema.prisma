generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model WriteForm {
  id            Int      @id @default(autoincrement())
  firstName     String
  lastName      String
  phone         String
  email         String
  streetAddress String?
  city          String?
  state         String?
  zipCode       String?
  companyName   String?
  interests     String?
  comments      String?
  createdAt     DateTime @default(now())
}

model AdvertiseForm {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  firstName     String
  lastName      String
  phone         String
  email         String
  streetAddress String?
  city          String?
  state         String?
  zipCode       String?
  companyName   String?
  interests     String?
  comments      String?
}

model PartnerForm {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  firstName     String
  lastName      String
  phone         String
  email         String
  streetAddress String?
  city          String?
  state         String?
  zipCode       String?
  companyName   String?
  interests     String?
  comments      String?
}

model ContactForm {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  name      String
  email     String
  subject   String
  message   String
}

model User {
  id        Int      @id @default(autoincrement())
  company   String
  country   String
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  // Relations
  likes       ArticleLike[]
  comments    Comment[]
  downloads   ArticleDownload[]
}

model Article {
  id          Int       @id @default(autoincrement())
  title       String
  slug        String    @unique
  content     String
  author      String
  createdAt   DateTime  @default(now())
  imageUrl    String?
  // Relations
  likes       ArticleLike[]
  comments    Comment[]
  downloads   ArticleDownload[]
}

model ArticleLike {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  article    Article  @relation(fields: [articleId], references: [id])
  articleId  Int
  isLike     Boolean
  createdAt  DateTime @default(now())

  @@unique([userId, articleId])
}

model Comment {
  id         Int       @id @default(autoincrement())
  content    String
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  article    Article   @relation(fields: [articleId], references: [id])
  articleId  Int
  parent     Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  parentId   Int?
  replies    Comment[] @relation("CommentReplies")
  createdAt  DateTime  @default(now())
}

model ArticleDownload {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  article    Article  @relation(fields: [articleId], references: [id])
  articleId  Int
  createdAt  DateTime @default(now())
}
